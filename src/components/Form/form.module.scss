/* .container {
  container-name: form;
  container-type: inline-size;
  display: flex;
  box-sizing: border-box;
  border-radius: 2vmin;
  flex-flow: column nowrap;
  .form {
    overflow: auto;
    display: flex;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    flex-flow: column nowrap;
    padding: 0.2;
    gap: 0.2;
    sub {
      color: var(--primary);
    }
    .buttonsRow {
      display: flex;
      flex-flow: row nowrap;
    }
  }
} */

.container {
  container-name: form;
  overflow: scroll;
  container-type: inline-size;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  gap: 2rem;
  display: flex;
  flex-flow: column nowrap;
}

.segment {
  display: flex;
  justify-content: space-evenly;
  align-items: stretch;
  align-content: stretch;
  box-sizing: border-box;
  padding: 0.2rem;
  gap: 0.2rem;
  flex: 1;
  border-radius: 2vmin;

  &Detached {
    @extend .segment;
    flex-flow: column nowrap;
    position: absolute;
    right: 2rem;
    box-shadow: var(--dp6);

    * {
      &:first-child {
        border-radius: 2vmin 2vmin 0 0;
      }

      &:last-child {
        border-radius: 0 0 2vmin 2vmin;
      }

      &:only-child {
        border-radius: 2vmin;
      }
    }
  }

  &Column {
    @extend .segment;
    gap: 1.5rem;
    flex-flow: column nowrap;
    border-color: var(--primary-fixed);
    padding: 0.5rem;

    @media (width < 600px) {
      flex-flow: row wrap;
    }
  }

  &Row {
    @extend .segment;
    flex-flow: row nowrap;
    align-items: center;
    gap: 2rem;
    justify-content: space-evenly;
    border-radius: 0.2rem;
    &Wrap {
      @extend .segment;
      align-items: center;
      gap: 2rem;
      justify-content: space-evenly;
      border-radius: 0.2rem;
      flex-flow: row wrap;
      @container form (min-width: 600px) {
        flex-flow: row nowrap;
      }
    }
  }
}

.submitButton {
  border: none;
  box-shadow: var(--dp5);
  border-radius: 2vmax;
  flex-grow: 1;
  width: 30em;
  background-color: var(--secondary);
  & > span {
    color: var(--on-secondary);
    font-variation-settings:
      'FILL' 0,
      'wght' 300,
      'GRAD' 0,
      'opsz' 24;
  }
  &:hover,
  &:active {
    background-color: var(--secondary);
    box-shadow: var(--dp8);
    & > span {
      font-variation-settings:
        'FILL' 1,
        'wght' 600,
        'GRAD' 200,
        'opsz' 48;
      color: var(--on-secondary);
    }
  }
}
.textArea,
.selectArea {
  flex: 2;
  border: none;
  text-decoration: none;

  border-radius: 0.2rem 0.2rem 0 0;
  height: 4rem;
  text-align: center;
  font-family: var(--josefa);
  font-size: 0.8rem;
  box-sizing: border-box;
  resize: both;
  padding: 1rem;
  &:hover,
  &:active,
  &:focus {
    &:after {
      transition: all 0.5s;
      content: ''; // ::before and ::after both require content
      position: absolute;
      display: block;
      top: 0;
      left: 0;
      border-radius: 1rem;
      width: 100%;
      height: 100%;
      opacity: 0.08;
    }
  }
}
.textArea {
  background-color: var(--surface-container-highest);
  border-bottom: solid 0.1rem var(--on-surface-variant);
  color: var(--on-surface-variant);
  &:disabled {
    background-color: var(--on-surface);
    opacity: 0.04;
    color: var(--on-surface);
  }
  &:hover {
    color: var(--on-surface-variant);
    background-color: var(--surface-variant);
    border-bottom: solid 0.2rem var(--on-surface);
    &:after {
      background-color: var(--on-surface);
      opacity: 0.08;
    }
  }
  &:active {
    background-color: var(--primary-container);
    color: var(--on-surface-variant);
    border-bottom: solid 0.2rem var(--on-surface);
  }
  &:focus {
    background-color: var(--surface-container);
    color: var(--on-surface);
    border-bottom: solid 0.2rem var(--primary);
  }
}
.selectArea {
  background-color: var(--secondary-container);
  color: var(--on-secondary-container);
  &:active,
  &:focus {
    color: var(--on-surface);
    border-left: solid 0.2rem var(--primary);
  }
}

.label {
  flex: 1;
  text-align: right;
  font-family: var(--josefa);
  font-variation-settings: 'wght' 300;
}
.titleInput,
.title {
  flex: 2;
}
.vencimientoArea {
  @extend .textArea;
  border-radius: 0.1rem 0 0 0.1rem;
}

.button {
  border: none;
  box-shadow: var(--dp5);
  box-sizing: border-box;
  border-radius: 1rem;
  padding: 0.5rem;
  background-color: var(--primary-container);
  color: var(--on-primary-container);
  flex-flow: row nowrap;
  justify-items: stretch;
  align-items: center;
  justify-content: space-around;
  align-content: center;
  transition: all 0.3s;
  & > .icon,
  & > .text {
    color: var(--on-secondary-container);
    transition: all 1s;
    font-variation-settings:
      'FILL' 0,
      'wght' 300,
      'GRAD' 0,
      'opsz' 24;
  }
  .text {
    font-family: var(--raleway);
  }
  &:hover,
  &:active {
    background-color: var(--tertiary-container);
    box-shadow: var(--dp8);
    & > span {
      font-variation-settings:
        'FILL' 1,
        'wght' 400,
        'GRAD' 200,
        'opsz' 24;
      color: var(--tertiary);
    }
  }
  &Active {
    @extend .button;
    flex-flow: column nowrap;
    flex: 2;
    background-color: var(--primary);
    color: var(--on-primary);
    & > .icon,
    & > .text {
      color: var(--on-secondary-container);
    }
  }
  &Passive {
    @extend .button;
    flex: 1;
    flex-flow: column nowrap;
    background-color: var(--primary-container);
    color: var(--on-primary-container);
    & > .text,
    & > .icon {
      color: var(--on-primary-container);
    }
  }
}
/* Reset: https://piccalil.li/blog/a-more-modern-css-reset/ */

.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

/* The switchBox - the box around the slider */
.switchBox {
  width: calc(
    (var(--switch-input-thumb-size) * 2) + (var(--switch-input-gutter) * 4)
  );
  height: calc(
    var(--switch-input-thumb-size) + (var(--switch-input-gutter) * 3)
  );
  border-radius: calc(
    var(--switch-input-thumb-size) + var(--switch-input-gutter)
  );
  padding: var(--switch-input-gutter);
  box-sizing: border-box;
  background: var(--switch-input-off-bg);
  color: var(--switch-input-off-text);
  text-align: left;
  text-transform: uppercase;
  font-family: var(--switch-input-font-family);
  font-weight: var(--switch-input-font-weight);
  cursor: pointer;
  container-type: inline-size;
  position: relative;
  display: inline-block;
  border: 0.1rem solid var(--outline-variant);
  &:has(:checked) {
    background: var(--switch-input-on-bg);
    color: var(--switch-input-on-text);
    border: none;
    width: calc(
      (var(--switch-input-thumb-size) * 2) + (var(--switch-input-gutter) * 3)
    );
    height: calc(
      var(--switch-input-thumb-size) + (var(--switch-input-gutter) * 2)
    );
    .thumb {
      background-color: var(--on-secondary);
    }
  }
}

.decor {
  position: absolute;
  inset-block: 0;
  box-sizing: border-box;
  inset-inline-start: 0;
  padding: var(--switch-input-decor-space);
  font-size: var(--switch-input-font-size);
  display: flex;
  width: 100%;
  align-items: center;
  user-select: none;
}

.decor[data-switch-input-state='off'] {
  justify-content: flex-end;
}

.thumb {
  display: block;
  width: var(--switch-input-thumb-size);
  height: var(--switch-input-thumb-size);
  box-sizing: border-box;
  border-radius: var(--switch-input-thumb-size);
  background: var(--switch-input-thumb-bg);
  border: var(--switch-input-thumb-stroke);
  z-index: 1;
  position: absolute;
  inset-block-start: var(--switch-input-gutter);
  inset-inline-start: var(--switch-input-gutter);
  transition: var(--switch-input-transition);
}

/* Could do this */
/* .switchBox:has(:focus) .thumb {
  outline: var(--switch-input-focus-stroke);
} */

/* Better pointer experience. Still uses has because focus visible would have to be put direct on the checkbox */
.switchBox:has(:focus-visible) .thumb {
  outline: var(--switch-input-focus-stroke);
}

.switchBox:has(:checked) .thumb {
  inset-inline-start: calc(
    var(--switch-input-thumb-size) + (var(--switch-input-gutter) * 2)
  );
}

/* Hide default HTML checkbox */
.switchBox .inputElement {
  opacity: 0;
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

/* The slider */
.slider {
  border-radius: 50vw;
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--surface-container-highest);
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  border-radius: 50vw;
  position: absolute;
  content: '';
  height: 0.8rem;
  width: 0.8rem;
  left: 0.03rem;
  bottom: 0.02rem;
  background-color: var(--outline);
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.inputElement:checked + .slider {
  background-color: var(--primary);
  &:before {
    background-color: var(--on-primary);
  }
}

.inputElement:focus + .slider {
  box-shadow: 0 0 1px var(--primary);
}

.inputElement:checked + .slider:before {
  -webkit-transform: translateX(2rem);
  -ms-transform: translateX(2rem);
  transform: translateX(2rem);
}
